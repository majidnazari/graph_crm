
scalar _Any
scalar _FieldSet


# a union of all types that use the @key directive
union _Entity = Student | Course | User

type _Service {
  sdl: String
}

# extend type Query {
#   _entities(representations: [_Any!]!): [_Entity]! 
#   _service: _Service!  
# }

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

# this is an optional directive discussed below
directive @extends on OBJECT | INTERFACE

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# scalar _Any
# scalar _FieldSet
# a union of all types that use the @key directive
# union _Entity

# type _Service {
#   sdl: String
# }


# directive @external on FIELD_DEFINITION
# directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
# directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
# directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

# # this is an optional directive discussed below
# directive @extends on OBJECT 


"Indicates what fields are available at the top level of a query operation."
 type Query {
         _entities(representations: [_Any!]!): [_Entity]!
         _service: _Service! 
    "Find a single user by an identifying attribute."
    # user(
    #   "Search by primary key."
    #   id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

    #   "Search by email address."
    #   email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    # ): User @find

    # "List multiple users."
    # users(
    #   "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
    #   name: String @where(operator: "like")
    # ): [User!]! @paginate(defaultCount: 10)
    GetStudent(id:ID!): Student @field(resolver: "App\\GraphQL\\Queries\\Student\\GetStudent@resolveStudentAttribute")
    GetStudents: [Student] @paginate(builder: "App\\GraphQL\\Queries\\Student\\GetStudents@resolveStudentsAttribute")
}

"Account of a person who utilizes this application."
# type User {
#     "Unique primary key."
#     id: ID!

#     "Non-unique name."
#     name: String!

#     "Unique email address."
#     email: String!

#     "When the email was verified."
#     email_verified_at: DateTime

#     "When the account was created."
#     created_at: DateTime!

#     "When the account was last updated."
#     updated_at: DateTime!
# }

type Student @key(fields: "id") {
        id:ID 
        phone:String  
        first_name:String
        last_name:String
        level:Int
        egucation_level:Int
        parents_job_title:String
        home_phone:String
        father_phone:String
        mother_phone:String
        school:String
        average:Float
        major:String
        introducing:String
        student_phone:String
        cities_id:Int
        sources_id:Int
        supporters_id:Int
        archived:String
        description:String
}
# type Course @key(fields: "id") @extends{
#       id:ID @external  
# }